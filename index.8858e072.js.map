{"mappings":"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","sources":["<anon>","src/modules/Game.class.js"],"sourcesContent":["\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4cc0\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4cc0\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"efyfk\", function(module, exports) {\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.initialState = initialState ? initialState.map((r)=>[\n                ...r\n            ]) : Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.state = this._clone(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n        this.started = false;\n    }\n    // =====================\n    // üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n    // =====================\n    _clone(state) {\n        return state.map((r)=>[\n                ...r\n            ]);\n    }\n    _getEmptyCells() {\n        const empty = [];\n        for(let r = 0; r < 4; r++){\n            for(let c = 0; c < 4; c++)if (this.state[r][c] === 0) empty.push([\n                r,\n                c\n            ]);\n        }\n        return empty;\n    }\n    _addRandomCell() {\n        const empty = this._getEmptyCells();\n        if (!empty.length) return;\n        const [r, c] = empty[Math.floor(Math.random() * empty.length)];\n        this.state[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n    _transpose(state) {\n        return state[0].map((_, c)=>state.map((r)=>r[c]));\n    }\n    _reverseRows(state) {\n        return state.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    _mergeRow(row) {\n        const filtered = row.filter(Boolean);\n        const newRow = [];\n        let score = 0;\n        for(let i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n            const merged = filtered[i] * 2;\n            newRow.push(merged);\n            score += merged;\n            i++;\n        } else newRow.push(filtered[i]);\n        while(newRow.length < 4)newRow.push(0);\n        return {\n            row: newRow,\n            score: score\n        };\n    }\n    _boardsEqual(a, b) {\n        return a.flat().every((v, i)=>v === b.flat()[i]);\n    }\n    _canMove() {\n        const state = this.state;\n        // –ï—Å—Ç—å –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞?\n        if (state.flat().includes(0)) return true;\n        // –ï—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏?\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 3; c++){\n            if (state[r][c] === state[r][c + 1]) return true;\n        }\n        // –ï—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏?\n        for(let c = 0; c < 4; c++)for(let r = 0; r < 3; r++){\n            if (state[r][c] === state[r + 1][c]) return true;\n        }\n        return false;\n    }\n    // =====================\n    // üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã API\n    // =====================\n    getState() {\n        return this._clone(this.state);\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.state = this._clone(this.state);\n            this.status = \"playing\";\n            this._addRandomCell();\n            this._addRandomCell();\n            this.started = true;\n        }\n    }\n    restart() {\n        this.state = this._clone(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n        this.started = false;\n    }\n    _moveBase(state, direction) {\n        // direction: 'left' | 'right' | 'up' | 'down'\n        let newState = this._clone(state);\n        let totalScore = 0;\n        if (direction === \"up\" || direction === \"down\") newState = this._transpose(newState);\n        if (direction === \"right\" || direction === \"down\") newState = this._reverseRows(newState);\n        const moved = newState.map((row)=>{\n            const { row: newRow, score: score } = this._mergeRow(row);\n            totalScore += score;\n            return newRow;\n        });\n        let result = moved;\n        if (direction === \"right\" || direction === \"down\") result = this._reverseRows(result);\n        if (direction === \"up\" || direction === \"down\") result = this._transpose(result);\n        return {\n            result: result,\n            totalScore: totalScore\n        };\n    }\n    _move(direction) {\n        if (!this.started || this.status !== \"playing\") return;\n        const { result: result, totalScore: totalScore } = this._moveBase(this.state, direction);\n        if (this._boardsEqual(this.state, result)) // –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n        return;\n        this.state = result;\n        this.score += totalScore;\n        if (this.state.flat().includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n        this._addRandomCell();\n        if (!this._canMove()) this.status = \"lose\";\n    }\n    moveLeft() {\n        this._move(\"left\");\n    }\n    moveRight() {\n        this._move(\"right\");\n    }\n    moveUp() {\n        this._move(\"up\");\n    }\n    moveDown() {\n        this._move(\"down\");\n    }\n}\nmodule.exports = $a5fd07fa01589658$var$Game;\n\n});\n\n\nparcelRequire(\"efyfk\");\n\n//# sourceMappingURL=index.8858e072.js.map\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  constructor(initialState) {\n    this.initialState = initialState\n      ? initialState.map((r) => [...r])\n      : Array.from({ length: 4 }, () => Array(4).fill(0));\n\n    this.state = this._clone(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n    this.started = false;\n  }\n\n  // =====================\n  // üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n  // =====================\n  _clone(state) {\n    return state.map((r) => [...r]);\n  }\n\n  _getEmptyCells() {\n    const empty = [];\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 0) {\n          empty.push([r, c]);\n        }\n      }\n    }\n\n    return empty;\n  }\n\n  _addRandomCell() {\n    const empty = this._getEmptyCells();\n\n    if (!empty.length) {\n      return;\n    }\n\n    const [r, c] = empty[Math.floor(Math.random() * empty.length)];\n\n    this.state[r][c] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  _transpose(state) {\n    return state[0].map((_, c) => state.map((r) => r[c]));\n  }\n\n  _reverseRows(state) {\n    return state.map((row) => [...row].reverse());\n  }\n\n  _mergeRow(row) {\n    const filtered = row.filter(Boolean);\n    const newRow = [];\n    let score = 0;\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        const merged = filtered[i] * 2;\n\n        newRow.push(merged);\n        score += merged;\n        i++;\n      } else {\n        newRow.push(filtered[i]);\n      }\n    }\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return {\n      row: newRow, score,\n    };\n  }\n\n  _boardsEqual(a, b) {\n    return a.flat().every((v, i) => v === b.flat()[i]);\n  }\n\n  _canMove() {\n    const state = this.state;\n\n    // –ï—Å—Ç—å –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞?\n    if (state.flat().includes(0)) {\n      return true;\n    }\n\n    // –ï—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏?\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 3; c++) {\n        if (state[r][c] === state[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n\n    // –ï—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏?\n    for (let c = 0; c < 4; c++) {\n      for (let r = 0; r < 3; r++) {\n        if (state[r][c] === state[r + 1][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // =====================\n  // üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã API\n  // =====================\n  getState() {\n    return this._clone(this.state);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.state = this._clone(this.state);\n      this.status = 'playing';\n      this._addRandomCell();\n      this._addRandomCell();\n      this.started = true;\n    }\n  }\n\n  restart() {\n    this.state = this._clone(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n    this.started = false;\n  }\n\n  _moveBase(state, direction) {\n    // direction: 'left' | 'right' | 'up' | 'down'\n    let newState = this._clone(state);\n    let totalScore = 0;\n\n    if (direction === 'up' || direction === 'down') {\n      newState = this._transpose(newState);\n    }\n\n    if (direction === 'right' || direction === 'down') {\n      newState = this._reverseRows(newState);\n    }\n\n    const moved = newState.map((row) => {\n      const { row: newRow, score } = this._mergeRow(row);\n\n      totalScore += score;\n\n      return newRow;\n    });\n\n    let result = moved;\n\n    if (direction === 'right' || direction === 'down') {\n      result = this._reverseRows(result);\n    }\n\n    if (direction === 'up' || direction === 'down') {\n      result = this._transpose(result);\n    }\n\n    return {\n      result, totalScore,\n    };\n  }\n\n  _move(direction) {\n    if (!this.started || this.status !== 'playing') {\n      return;\n    }\n\n    const { result, totalScore } = this._moveBase(this.state, direction);\n\n    if (this._boardsEqual(this.state, result)) {\n      // –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n      return;\n    }\n\n    this.state = result;\n    this.score += totalScore;\n\n    if (this.state.flat().includes(2048)) {\n      this.status = 'win';\n\n      return;\n    }\n\n    this._addRandomCell();\n\n    if (!this._canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveLeft() {\n    this._move('left');\n  }\n\n  moveRight() {\n    this._move('right');\n  }\n\n  moveUp() {\n    this._move('up');\n  }\n\n  moveDown() {\n    this._move('down');\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","constructor","initialState","map","r","Array","from","length","fill","state","_clone","score","status","started","_getEmptyCells","empty","c","push","_addRandomCell","Math","floor","random","_transpose","_","_reverseRows","row","reverse","_mergeRow","filtered","filter","Boolean","newRow","i","merged","_boardsEqual","a","b","flat","every","v","_canMove","includes","getState","getScore","getStatus","start","restart","_moveBase","direction","newState","totalScore","result","_move","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.8858e072.js.map"}